import os
import json
import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import httpx

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-2.5-flash")
GEMINI_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{GEMINI_MODEL}:generateContent?key={GEMINI_API_KEY}"

if not GEMINI_API_KEY:
    raise RuntimeError("Missing GEMINI_API_KEY environment variable")

app = FastAPI(
    title="Pattern-Based GoLang UT Helper",
    description="Intelligent AI agent for standardized unit test case generation for Go projects",
    version="1.0.0"
)

# CORS: in production, set your exact GitHub Pages origin(s) instead of "*"
ALLOWED_ORIGINS = os.getenv("ALLOWED_ORIGINS", "*").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=False,
    allow_methods=["POST", "GET", "OPTIONS"],
    allow_headers=["*"],
)

# Request models
class CodePatternRequest(BaseModel):
    goFileContent: str
    patternText: str

class LLMResponse(BaseModel):
    success: bool
    response: Optional[str] = None
    error: Optional[str] = None

@app.post("/generate-unit-test", response_model=LLMResponse)
async def generate_unit_test(request: CodePatternRequest):
    """
    Generate unit test code based on Go file content and pattern text
    """
    try:
        # Create dynamic LLM prompt by combining goFileContent and patternText
        llm_prompt = f"""
You are an expert Go developer specializing in writing comprehensive unit tests. 

Given the following Go code:
```go
{request.goFileContent}
```

And the following test pattern to follow:
{request.patternText}

Please generate appropriate unit tests for the provided Go code following the specified pattern. The unit tests should:
1. Cover all major functions and methods
2. Include edge cases and error scenarios
3. Follow Go testing best practices
4. Use appropriate test data and mocks if needed
5. Follow the exact pattern structure provided

Please provide only the Go test code without any additional explanations.
"""

        # Prepare request payload for Gemini API
        payload = {
            "contents": [{
                "parts": [{
                    "text": llm_prompt
                }]
            }],
            "generationConfig": {
                "temperature": 0.3,
                "topK": 40,
                "topP": 0.95,
                "maxOutputTokens": 8192,
            }
        }

        # Make request to Gemini API
        async with httpx.AsyncClient() as client:
            response = await client.post(
                GEMINI_URL,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=30.0
            )
            
            if response.status_code != 200:
                return LLMResponse(
                    success=False,
                    error=f"Gemini API error: {response.status_code} - {response.text}"
                )
            
            result = response.json()
            
            # Extract generated content from Gemini response
            if "candidates" in result and len(result["candidates"]) > 0:
                generated_content = result["candidates"][0]["content"]["parts"][0]["text"]
                return LLMResponse(
                    success=True,
                    response=generated_content
                )
            else:
                return LLMResponse(
                    success=False,
                    error="No content generated by Gemini API"
                )
    
    except httpx.TimeoutException:
        return LLMResponse(
            success=False,
            error="Request timeout - Gemini API took too long to respond"
        )
    except httpx.RequestError as e:
        return LLMResponse(
            success=False,
            error=f"Network error: {str(e)}"
        )
    except Exception as e:
        return LLMResponse(
            success=False,
            error=f"Unexpected error: {str(e)}"
        )

@app.get("/")
async def root():
    """Root endpoint - API information"""
    return {
        "message": "Pattern-Based GoLang UT Helper API",
        "version": "1.0.0",
        "description": "Intelligent AI agent for standardized unit test case generation for Go projects",
        "endpoints": {
            "POST /generate-unit-test": "Generate unit tests based on Go code and pattern",
            "GET /health": "Health check endpoint",
            "GET /docs": "Interactive API documentation",
            "GET /redoc": "Alternative API documentation"
        }
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "message": "Pattern UT Helper API is running"}



if __name__ == "__main__":
    # for local dev: uvicorn app:app --reload
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", "8000")), reload=True)
